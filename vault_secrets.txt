 # Get a screts from vault without mentioning it in yaml
 ########################## NEW WAY ########################
          
      - id: vault-app-secrets
        run: |
          # Retrieve app secrets from the vault
          data=$(curl -s -H "X-Vault-Token: ${{ env.VAULT_TOKEN }}" -H "Authorization: Bearer ${{ steps.oidc.outputs.token }}" "https://public.vault.test.cloud/v1/secret/data/project/myapp/${{ env.TARGET_ENV }}/${{ env.TARGET_BRAND }}/${{ env.TARGET_LOCALE }}/${{ env.APP_NAME }}")
          # Get Secrets
          secrets=$(echo "$data" | jq -r '.data.data')
          # Create env file
          echo "$secrets" | jq -r 'to_entries | map("\(.key)=\(.value)")[]' >> .env.txt


########################## OLD WAY ########################

       - id: vault
              uses: hashicorp/vault-action@v2.4.0
              with:
                  url: https://public.vault.test.cloud # COPY
                  method: jwt # COPY
                  role: ${{ github.event.repository.name }} # COPY
                  exportEnv: false
                  extraHeaders: 'Authorization: Bearer ${{ steps.oidc.outputs.token }}' # COPY
                  secrets: |
                    secret/data/gcp-service-accounts/${{ env.TARGET_GCP_PROJECT }}/${{ env.TARGET_GCP_SERVICEKEY }} key ;
                    secret/data/project/myapp${{ env.TARGET_ENV }}/${{ env.TARGET_BRAND }}/${{ env.TARGET_LOCALE }}/myapp Mysecrets ;
               
            - name: Build apps
              shell: bash
              env:
                  APP_KEY: ${{ steps.vault.outputs.APP_KEY }}
                  my_secrets_key_name: ${{ steps.vault.outputs.my_secrets_key_name }}

         run: |
                  mv ./apps/${{ env.TARGET_BRAND }}/${{ env.TARGET_LOCALE }}/home/.env.example ./apps/${{ env.TARGET_BRAND }}/${{ env.TARGET_LOCALE }}/home/.env
                  sed -i 's,my_secrets_key_name_VALUE,${{ env.my_secrets_key_name }},g' ./apps/${{ env.TARGET_BRAND }}/${{ env.TARGET_LOCALE }}/home/.env
